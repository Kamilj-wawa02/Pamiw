@using Blazored.LocalStorage;
@using System.Security.Claims;
@inherits LayoutComponentBase

@inject ITranslationsManager TranslationsManager
@inject ILocalStorageService LocalStorageService
@inject IAuthService AuthService;
@inject ILibraryService LibraryService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">

            <AuthorizeView>
                <Authorized>

                    <div>
                        @context.User.Identity.Name |
                        @TranslationsManager.Get(MainLayout.Language, context.User.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault().Value)
                        @context.User.Claims.Where(c => c.Type == "DateCreated").FirstOrDefault().Value
                    </div>

                    <a href="#" @onclick="Logout">@TranslationsManager.Get(MainLayout.Language, "Logout")</a>
                </Authorized>
                <NotAuthorized>
                    <a href="/login">@TranslationsManager.Get(MainLayout.Language, "Login")</a>
                    <a href="/register">@TranslationsManager.Get(MainLayout.Language, "Register")</a>
                </NotAuthorized>
            </AuthorizeView>


            <a href="https://docs.microsoft.com/aspnet/" target="_blank">@TranslationsManager.Get(MainLayout.Language, "About") </a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {

    public static string Language = "english";

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await MainLayout.SetupAuthState(AuthenticationStateProvider, LibraryService, AuthService, LocalStorageService);
        NavigationManager.NavigateTo("/login");
    }

    public static async Task<bool> SetupAuthState(AuthenticationStateProvider authenticationStateProvider,
        ILibraryService libraryService, IAuthService authService, ILocalStorageService localStorageService)
    {
        await authenticationStateProvider.GetAuthenticationStateAsync();
        string token = await localStorageService.GetItemAsStringAsync("authToken");
        if (token != null)
        {
            token = token.Replace("\"", "");
        }
        libraryService.SetAuthToken(token);
        authService.SetAuthToken(token);

        return true;
    }

}