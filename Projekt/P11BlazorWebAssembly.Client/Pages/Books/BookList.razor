@page "/books/booksList"

@attribute [Authorize]

@inject ITranslationsManager TranslationsManager
@inject ILibraryService LibraryService
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>@TranslationsManager.Get(MainLayout.Language, "BookListTitle")</h3>

<div class="buttons-row">
    <InputText @bind-Value=searchTerm></InputText>
    <button class="btn button-primary" @onclick=Search>@TranslationsManager.Get(MainLayout.Language, "Search")</button>

    <div class="separator"></div>

    <button class="btn button-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">@TranslationsManager.Get(MainLayout.Language, "Previous")</button>
    <span class="search-span"> @currentPage / @maxPage </span>
    <button class="btn button-primary" disabled="@(currentPage>=maxPage)" @onclick="NextPage">@TranslationsManager.Get(MainLayout.Language, "Next")</button>
</div>

@if (books == null || isLoading)
{
    @if (isLoading)
    {
        <div class="loader-container">
            <div class="loader"></div>
        </div>
    }
    else
    {
       <p><em>@message</em></p> 
    }
}
else
{
    <p>
        <button class="btn button-primary" @onclick="CreateNewBook">@TranslationsManager.Get(MainLayout.Language, "CreateBook")</button>
    </p>


    <div>
        @foreach (var book in books)
        {
            <div class="book-container no-select" @onclick="()=> GoToEdit(book.Id)">
                <div>
                    <div class="row title">
                        <span>@book.Title</span>
                        <span> - </span>
                        <span>@book.Author</span>
                        <span>( #@book.Id )</span>
                    </div>
                    <div class="row">
                        <span>@book.Description</span>
                    </div>
                    <div class="row">
                        <span>@TranslationsManager.Get(MainLayout.Language, "Barcode"): @book.Barcode</span>
                        <span>@TranslationsManager.Get(MainLayout.Language, "Price"): @book.Price.ToString("C")</span>
                        <span>@TranslationsManager.Get(MainLayout.Language, "ReleaseDate"): @book.ReleaseDate.ToString("dd MM yyyy")</span>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    private List<Book> books = new List<Book>();
    private string message = "Loading books...";

    private bool isLoading = true;

    private int currentPage = 1;
    private int maxPage = 1;
    private const int pageSize = 10;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await MainLayout.SetupAuthState(AuthenticationStateProvider, LibraryService, AuthService, LocalStorageService);

        await  LoadBooks();
    }

    private async Task LoadBooks()
    {
        books.Clear();
        isLoading = true;

        var response = await LibraryService.SearchBooksAsync(searchTerm, currentPage, pageSize);
        if (response.Success)
        {
            books = response.Data;
        }
        else
        {
            message = response.Message;
        }
        isLoading = false;
        maxPage = await GetMaxPage();
    }


    void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/books/editbook/{id}");
    }

    private async Task PreviousPage()
    {
        if (isLoading)
        {
            return;
        }

        if (currentPage > 1)
        {
            currentPage--;
            await LoadBooks();
        }
    }
    private async Task NextPage()
    {
        if (isLoading)
        {
            return;
        }
        currentPage++;
        await LoadBooks();
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadBooks();
    }

    private async Task<int> GetMaxPage()
    {
        return LibraryService.GetMaxPage(pageSize, (await LibraryService.GetBooksCountAsync(searchTerm)).Data);
    }

    private void CreateNewBook()
    {
        NavigationManager.NavigateTo("books/createbook");
    }
}
