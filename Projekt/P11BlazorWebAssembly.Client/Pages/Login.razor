@page "/Login"
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using P06Shop.Shared.Auth;
@using P06Shop.Shared.Services.AuthService;

@inject IJSRuntime JSRuntime
@inject ITranslationsManager TranslationsManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (LoggingIn)
{
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}
else
{
    <h3>@TranslationsManager.Get(MainLayout.Language, "LoginForm")</h3>


    <EditForm Model="userLoginDTO" OnValidSubmit="HandleLogin">

        <p style="margin-top: 1rem">@TranslationsManager.Get(MainLayout.Language, "Email"):</p>
        <InputText @bind-Value="userLoginDTO.Email" id="email"></InputText>
        <p style="margin-top: 1rem">@TranslationsManager.Get(MainLayout.Language, "Password"):</p>
        <InputText @bind-Value="userLoginDTO.Password" id="password"></InputText>

        <br />
        <button type="submit" class="btn button-primary" style="margin-top: 1.5rem">@TranslationsManager.Get(MainLayout.Language, "Log_in")</button>

    </EditForm>

    <LoginByFacebook />

    @if (!string.IsNullOrEmpty(message))
    {
        <p style="color: red;">@message</p>
    }
}


@code {

    public static bool LoggingIn = false;
    private UserLoginDTO userLoginDTO = new UserLoginDTO();
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var storedLoggingIn = await LocalStorageService.GetItemAsync<bool?>("loggingIn");
        LoggingIn = storedLoggingIn.GetValueOrDefault(false);
    }

    private async Task HandleLogin()
    {
        if (userLoginDTO.Email == null || userLoginDTO.Password == null)
        {
            JSRuntime.InvokeVoidAsync("alert", TranslationsManager.Get(MainLayout.Language, "EmptyData"));
            return;
        }

        if (!userLoginDTO.Email.Contains("@") || userLoginDTO.Password.Length < 6)
        {
            JSRuntime.InvokeVoidAsync("alert", TranslationsManager.Get(MainLayout.Language, "WrongLoginDataMessage"));
            return;
        }

        var result = await  AuthService.Login(userLoginDTO);
        if (result.Success)
        {
            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            if (result.Message == "User not found.")
            {
                message = TranslationsManager.Get(MainLayout.Language, "UserNotFound");
            }
            else
            {
                message = result.Message;
            }
        }
    }

}
